// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/ValeryCherneykin/taskanalytics/file_processing/internal/service.FileProcessingService -o file_processing_service_minimock.go -n FileProcessingServiceMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/ValeryCherneykin/taskanalytics/file_processing/internal/model"
	"github.com/gojuno/minimock/v3"
)

// FileProcessingServiceMock implements mm_service.FileProcessingService
type FileProcessingServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreate          func(ctx context.Context, file *model.UploadedFile) (i1 int64, err error)
	funcCreateOrigin    string
	inspectFuncCreate   func(ctx context.Context, file *model.UploadedFile)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mFileProcessingServiceMockCreate

	funcDelete          func(ctx context.Context, id int64) (err error)
	funcDeleteOrigin    string
	inspectFuncDelete   func(ctx context.Context, id int64)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mFileProcessingServiceMockDelete

	funcGet          func(ctx context.Context, id int64) (up1 *model.UploadedFile, err error)
	funcGetOrigin    string
	inspectFuncGet   func(ctx context.Context, id int64)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mFileProcessingServiceMockGet

	funcList          func(ctx context.Context, limit uint64, offset uint64) (upa1 []*model.UploadedFile, err error)
	funcListOrigin    string
	inspectFuncList   func(ctx context.Context, limit uint64, offset uint64)
	afterListCounter  uint64
	beforeListCounter uint64
	ListMock          mFileProcessingServiceMockList

	funcUpdate          func(ctx context.Context, file *model.UploadedFile) (err error)
	funcUpdateOrigin    string
	inspectFuncUpdate   func(ctx context.Context, file *model.UploadedFile)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mFileProcessingServiceMockUpdate
}

// NewFileProcessingServiceMock returns a mock for mm_service.FileProcessingService
func NewFileProcessingServiceMock(t minimock.Tester) *FileProcessingServiceMock {
	m := &FileProcessingServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mFileProcessingServiceMockCreate{mock: m}
	m.CreateMock.callArgs = []*FileProcessingServiceMockCreateParams{}

	m.DeleteMock = mFileProcessingServiceMockDelete{mock: m}
	m.DeleteMock.callArgs = []*FileProcessingServiceMockDeleteParams{}

	m.GetMock = mFileProcessingServiceMockGet{mock: m}
	m.GetMock.callArgs = []*FileProcessingServiceMockGetParams{}

	m.ListMock = mFileProcessingServiceMockList{mock: m}
	m.ListMock.callArgs = []*FileProcessingServiceMockListParams{}

	m.UpdateMock = mFileProcessingServiceMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*FileProcessingServiceMockUpdateParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mFileProcessingServiceMockCreate struct {
	optional           bool
	mock               *FileProcessingServiceMock
	defaultExpectation *FileProcessingServiceMockCreateExpectation
	expectations       []*FileProcessingServiceMockCreateExpectation

	callArgs []*FileProcessingServiceMockCreateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FileProcessingServiceMockCreateExpectation specifies expectation struct of the FileProcessingService.Create
type FileProcessingServiceMockCreateExpectation struct {
	mock               *FileProcessingServiceMock
	params             *FileProcessingServiceMockCreateParams
	paramPtrs          *FileProcessingServiceMockCreateParamPtrs
	expectationOrigins FileProcessingServiceMockCreateExpectationOrigins
	results            *FileProcessingServiceMockCreateResults
	returnOrigin       string
	Counter            uint64
}

// FileProcessingServiceMockCreateParams contains parameters of the FileProcessingService.Create
type FileProcessingServiceMockCreateParams struct {
	ctx  context.Context
	file *model.UploadedFile
}

// FileProcessingServiceMockCreateParamPtrs contains pointers to parameters of the FileProcessingService.Create
type FileProcessingServiceMockCreateParamPtrs struct {
	ctx  *context.Context
	file **model.UploadedFile
}

// FileProcessingServiceMockCreateResults contains results of the FileProcessingService.Create
type FileProcessingServiceMockCreateResults struct {
	i1  int64
	err error
}

// FileProcessingServiceMockCreateOrigins contains origins of expectations of the FileProcessingService.Create
type FileProcessingServiceMockCreateExpectationOrigins struct {
	origin     string
	originCtx  string
	originFile string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreate *mFileProcessingServiceMockCreate) Optional() *mFileProcessingServiceMockCreate {
	mmCreate.optional = true
	return mmCreate
}

// Expect sets up expected params for FileProcessingService.Create
func (mmCreate *mFileProcessingServiceMockCreate) Expect(ctx context.Context, file *model.UploadedFile) *mFileProcessingServiceMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("FileProcessingServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &FileProcessingServiceMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.paramPtrs != nil {
		mmCreate.mock.t.Fatalf("FileProcessingServiceMock.Create mock is already set by ExpectParams functions")
	}

	mmCreate.defaultExpectation.params = &FileProcessingServiceMockCreateParams{ctx, file}
	mmCreate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// ExpectCtxParam1 sets up expected param ctx for FileProcessingService.Create
func (mmCreate *mFileProcessingServiceMockCreate) ExpectCtxParam1(ctx context.Context) *mFileProcessingServiceMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("FileProcessingServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &FileProcessingServiceMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("FileProcessingServiceMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &FileProcessingServiceMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreate
}

// ExpectFileParam2 sets up expected param file for FileProcessingService.Create
func (mmCreate *mFileProcessingServiceMockCreate) ExpectFileParam2(file *model.UploadedFile) *mFileProcessingServiceMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("FileProcessingServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &FileProcessingServiceMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("FileProcessingServiceMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &FileProcessingServiceMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.file = &file
	mmCreate.defaultExpectation.expectationOrigins.originFile = minimock.CallerInfo(1)

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the FileProcessingService.Create
func (mmCreate *mFileProcessingServiceMockCreate) Inspect(f func(ctx context.Context, file *model.UploadedFile)) *mFileProcessingServiceMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for FileProcessingServiceMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by FileProcessingService.Create
func (mmCreate *mFileProcessingServiceMockCreate) Return(i1 int64, err error) *FileProcessingServiceMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("FileProcessingServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &FileProcessingServiceMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &FileProcessingServiceMockCreateResults{i1, err}
	mmCreate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// Set uses given function f to mock the FileProcessingService.Create method
func (mmCreate *mFileProcessingServiceMockCreate) Set(f func(ctx context.Context, file *model.UploadedFile) (i1 int64, err error)) *FileProcessingServiceMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the FileProcessingService.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the FileProcessingService.Create method")
	}

	mmCreate.mock.funcCreate = f
	mmCreate.mock.funcCreateOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// When sets expectation for the FileProcessingService.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mFileProcessingServiceMockCreate) When(ctx context.Context, file *model.UploadedFile) *FileProcessingServiceMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("FileProcessingServiceMock.Create mock is already set by Set")
	}

	expectation := &FileProcessingServiceMockCreateExpectation{
		mock:               mmCreate.mock,
		params:             &FileProcessingServiceMockCreateParams{ctx, file},
		expectationOrigins: FileProcessingServiceMockCreateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up FileProcessingService.Create return parameters for the expectation previously defined by the When method
func (e *FileProcessingServiceMockCreateExpectation) Then(i1 int64, err error) *FileProcessingServiceMock {
	e.results = &FileProcessingServiceMockCreateResults{i1, err}
	return e.mock
}

// Times sets number of times FileProcessingService.Create should be invoked
func (mmCreate *mFileProcessingServiceMockCreate) Times(n uint64) *mFileProcessingServiceMockCreate {
	if n == 0 {
		mmCreate.mock.t.Fatalf("Times of FileProcessingServiceMock.Create mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreate.expectedInvocations, n)
	mmCreate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreate
}

func (mmCreate *mFileProcessingServiceMockCreate) invocationsDone() bool {
	if len(mmCreate.expectations) == 0 && mmCreate.defaultExpectation == nil && mmCreate.mock.funcCreate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreate.mock.afterCreateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Create implements mm_service.FileProcessingService
func (mmCreate *FileProcessingServiceMock) Create(ctx context.Context, file *model.UploadedFile) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	mmCreate.t.Helper()

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, file)
	}

	mm_params := FileProcessingServiceMockCreateParams{ctx, file}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_want_ptrs := mmCreate.CreateMock.defaultExpectation.paramPtrs

		mm_got := FileProcessingServiceMockCreateParams{ctx, file}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreate.t.Errorf("FileProcessingServiceMock.Create got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.file != nil && !minimock.Equal(*mm_want_ptrs.file, mm_got.file) {
				mmCreate.t.Errorf("FileProcessingServiceMock.Create got unexpected parameter file, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originFile, *mm_want_ptrs.file, mm_got.file, minimock.Diff(*mm_want_ptrs.file, mm_got.file))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("FileProcessingServiceMock.Create got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreate.CreateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the FileProcessingServiceMock.Create")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, file)
	}
	mmCreate.t.Fatalf("Unexpected call to FileProcessingServiceMock.Create. %v %v", ctx, file)
	return
}

// CreateAfterCounter returns a count of finished FileProcessingServiceMock.Create invocations
func (mmCreate *FileProcessingServiceMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of FileProcessingServiceMock.Create invocations
func (mmCreate *FileProcessingServiceMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to FileProcessingServiceMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mFileProcessingServiceMockCreate) Calls() []*FileProcessingServiceMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*FileProcessingServiceMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *FileProcessingServiceMock) MinimockCreateDone() bool {
	if m.CreateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateMock.invocationsDone()
}

// MinimockCreateInspect logs each unmet expectation
func (m *FileProcessingServiceMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FileProcessingServiceMock.Create at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateCounter := mm_atomic.LoadUint64(&m.afterCreateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && afterCreateCounter < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FileProcessingServiceMock.Create at\n%s", m.CreateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FileProcessingServiceMock.Create at\n%s with params: %#v", m.CreateMock.defaultExpectation.expectationOrigins.origin, *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && afterCreateCounter < 1 {
		m.t.Errorf("Expected call to FileProcessingServiceMock.Create at\n%s", m.funcCreateOrigin)
	}

	if !m.CreateMock.invocationsDone() && afterCreateCounter > 0 {
		m.t.Errorf("Expected %d calls to FileProcessingServiceMock.Create at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateMock.expectedInvocations), m.CreateMock.expectedInvocationsOrigin, afterCreateCounter)
	}
}

type mFileProcessingServiceMockDelete struct {
	optional           bool
	mock               *FileProcessingServiceMock
	defaultExpectation *FileProcessingServiceMockDeleteExpectation
	expectations       []*FileProcessingServiceMockDeleteExpectation

	callArgs []*FileProcessingServiceMockDeleteParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FileProcessingServiceMockDeleteExpectation specifies expectation struct of the FileProcessingService.Delete
type FileProcessingServiceMockDeleteExpectation struct {
	mock               *FileProcessingServiceMock
	params             *FileProcessingServiceMockDeleteParams
	paramPtrs          *FileProcessingServiceMockDeleteParamPtrs
	expectationOrigins FileProcessingServiceMockDeleteExpectationOrigins
	results            *FileProcessingServiceMockDeleteResults
	returnOrigin       string
	Counter            uint64
}

// FileProcessingServiceMockDeleteParams contains parameters of the FileProcessingService.Delete
type FileProcessingServiceMockDeleteParams struct {
	ctx context.Context
	id  int64
}

// FileProcessingServiceMockDeleteParamPtrs contains pointers to parameters of the FileProcessingService.Delete
type FileProcessingServiceMockDeleteParamPtrs struct {
	ctx *context.Context
	id  *int64
}

// FileProcessingServiceMockDeleteResults contains results of the FileProcessingService.Delete
type FileProcessingServiceMockDeleteResults struct {
	err error
}

// FileProcessingServiceMockDeleteOrigins contains origins of expectations of the FileProcessingService.Delete
type FileProcessingServiceMockDeleteExpectationOrigins struct {
	origin    string
	originCtx string
	originId  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDelete *mFileProcessingServiceMockDelete) Optional() *mFileProcessingServiceMockDelete {
	mmDelete.optional = true
	return mmDelete
}

// Expect sets up expected params for FileProcessingService.Delete
func (mmDelete *mFileProcessingServiceMockDelete) Expect(ctx context.Context, id int64) *mFileProcessingServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("FileProcessingServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &FileProcessingServiceMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.paramPtrs != nil {
		mmDelete.mock.t.Fatalf("FileProcessingServiceMock.Delete mock is already set by ExpectParams functions")
	}

	mmDelete.defaultExpectation.params = &FileProcessingServiceMockDeleteParams{ctx, id}
	mmDelete.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// ExpectCtxParam1 sets up expected param ctx for FileProcessingService.Delete
func (mmDelete *mFileProcessingServiceMockDelete) ExpectCtxParam1(ctx context.Context) *mFileProcessingServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("FileProcessingServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &FileProcessingServiceMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("FileProcessingServiceMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &FileProcessingServiceMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.ctx = &ctx
	mmDelete.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDelete
}

// ExpectIdParam2 sets up expected param id for FileProcessingService.Delete
func (mmDelete *mFileProcessingServiceMockDelete) ExpectIdParam2(id int64) *mFileProcessingServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("FileProcessingServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &FileProcessingServiceMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("FileProcessingServiceMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &FileProcessingServiceMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.id = &id
	mmDelete.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the FileProcessingService.Delete
func (mmDelete *mFileProcessingServiceMockDelete) Inspect(f func(ctx context.Context, id int64)) *mFileProcessingServiceMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for FileProcessingServiceMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by FileProcessingService.Delete
func (mmDelete *mFileProcessingServiceMockDelete) Return(err error) *FileProcessingServiceMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("FileProcessingServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &FileProcessingServiceMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &FileProcessingServiceMockDeleteResults{err}
	mmDelete.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDelete.mock
}

// Set uses given function f to mock the FileProcessingService.Delete method
func (mmDelete *mFileProcessingServiceMockDelete) Set(f func(ctx context.Context, id int64) (err error)) *FileProcessingServiceMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the FileProcessingService.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the FileProcessingService.Delete method")
	}

	mmDelete.mock.funcDelete = f
	mmDelete.mock.funcDeleteOrigin = minimock.CallerInfo(1)
	return mmDelete.mock
}

// When sets expectation for the FileProcessingService.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mFileProcessingServiceMockDelete) When(ctx context.Context, id int64) *FileProcessingServiceMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("FileProcessingServiceMock.Delete mock is already set by Set")
	}

	expectation := &FileProcessingServiceMockDeleteExpectation{
		mock:               mmDelete.mock,
		params:             &FileProcessingServiceMockDeleteParams{ctx, id},
		expectationOrigins: FileProcessingServiceMockDeleteExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up FileProcessingService.Delete return parameters for the expectation previously defined by the When method
func (e *FileProcessingServiceMockDeleteExpectation) Then(err error) *FileProcessingServiceMock {
	e.results = &FileProcessingServiceMockDeleteResults{err}
	return e.mock
}

// Times sets number of times FileProcessingService.Delete should be invoked
func (mmDelete *mFileProcessingServiceMockDelete) Times(n uint64) *mFileProcessingServiceMockDelete {
	if n == 0 {
		mmDelete.mock.t.Fatalf("Times of FileProcessingServiceMock.Delete mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDelete.expectedInvocations, n)
	mmDelete.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDelete
}

func (mmDelete *mFileProcessingServiceMockDelete) invocationsDone() bool {
	if len(mmDelete.expectations) == 0 && mmDelete.defaultExpectation == nil && mmDelete.mock.funcDelete == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDelete.mock.afterDeleteCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDelete.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Delete implements mm_service.FileProcessingService
func (mmDelete *FileProcessingServiceMock) Delete(ctx context.Context, id int64) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	mmDelete.t.Helper()

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, id)
	}

	mm_params := FileProcessingServiceMockDeleteParams{ctx, id}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, &mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_want_ptrs := mmDelete.DeleteMock.defaultExpectation.paramPtrs

		mm_got := FileProcessingServiceMockDeleteParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDelete.t.Errorf("FileProcessingServiceMock.Delete got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDelete.DeleteMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmDelete.t.Errorf("FileProcessingServiceMock.Delete got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDelete.DeleteMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("FileProcessingServiceMock.Delete got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDelete.DeleteMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the FileProcessingServiceMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, id)
	}
	mmDelete.t.Fatalf("Unexpected call to FileProcessingServiceMock.Delete. %v %v", ctx, id)
	return
}

// DeleteAfterCounter returns a count of finished FileProcessingServiceMock.Delete invocations
func (mmDelete *FileProcessingServiceMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of FileProcessingServiceMock.Delete invocations
func (mmDelete *FileProcessingServiceMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to FileProcessingServiceMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mFileProcessingServiceMockDelete) Calls() []*FileProcessingServiceMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*FileProcessingServiceMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *FileProcessingServiceMock) MinimockDeleteDone() bool {
	if m.DeleteMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteMock.invocationsDone()
}

// MinimockDeleteInspect logs each unmet expectation
func (m *FileProcessingServiceMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FileProcessingServiceMock.Delete at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteCounter := mm_atomic.LoadUint64(&m.afterDeleteCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && afterDeleteCounter < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FileProcessingServiceMock.Delete at\n%s", m.DeleteMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FileProcessingServiceMock.Delete at\n%s with params: %#v", m.DeleteMock.defaultExpectation.expectationOrigins.origin, *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && afterDeleteCounter < 1 {
		m.t.Errorf("Expected call to FileProcessingServiceMock.Delete at\n%s", m.funcDeleteOrigin)
	}

	if !m.DeleteMock.invocationsDone() && afterDeleteCounter > 0 {
		m.t.Errorf("Expected %d calls to FileProcessingServiceMock.Delete at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteMock.expectedInvocations), m.DeleteMock.expectedInvocationsOrigin, afterDeleteCounter)
	}
}

type mFileProcessingServiceMockGet struct {
	optional           bool
	mock               *FileProcessingServiceMock
	defaultExpectation *FileProcessingServiceMockGetExpectation
	expectations       []*FileProcessingServiceMockGetExpectation

	callArgs []*FileProcessingServiceMockGetParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FileProcessingServiceMockGetExpectation specifies expectation struct of the FileProcessingService.Get
type FileProcessingServiceMockGetExpectation struct {
	mock               *FileProcessingServiceMock
	params             *FileProcessingServiceMockGetParams
	paramPtrs          *FileProcessingServiceMockGetParamPtrs
	expectationOrigins FileProcessingServiceMockGetExpectationOrigins
	results            *FileProcessingServiceMockGetResults
	returnOrigin       string
	Counter            uint64
}

// FileProcessingServiceMockGetParams contains parameters of the FileProcessingService.Get
type FileProcessingServiceMockGetParams struct {
	ctx context.Context
	id  int64
}

// FileProcessingServiceMockGetParamPtrs contains pointers to parameters of the FileProcessingService.Get
type FileProcessingServiceMockGetParamPtrs struct {
	ctx *context.Context
	id  *int64
}

// FileProcessingServiceMockGetResults contains results of the FileProcessingService.Get
type FileProcessingServiceMockGetResults struct {
	up1 *model.UploadedFile
	err error
}

// FileProcessingServiceMockGetOrigins contains origins of expectations of the FileProcessingService.Get
type FileProcessingServiceMockGetExpectationOrigins struct {
	origin    string
	originCtx string
	originId  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGet *mFileProcessingServiceMockGet) Optional() *mFileProcessingServiceMockGet {
	mmGet.optional = true
	return mmGet
}

// Expect sets up expected params for FileProcessingService.Get
func (mmGet *mFileProcessingServiceMockGet) Expect(ctx context.Context, id int64) *mFileProcessingServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("FileProcessingServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &FileProcessingServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.paramPtrs != nil {
		mmGet.mock.t.Fatalf("FileProcessingServiceMock.Get mock is already set by ExpectParams functions")
	}

	mmGet.defaultExpectation.params = &FileProcessingServiceMockGetParams{ctx, id}
	mmGet.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// ExpectCtxParam1 sets up expected param ctx for FileProcessingService.Get
func (mmGet *mFileProcessingServiceMockGet) ExpectCtxParam1(ctx context.Context) *mFileProcessingServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("FileProcessingServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &FileProcessingServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("FileProcessingServiceMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &FileProcessingServiceMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.ctx = &ctx
	mmGet.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGet
}

// ExpectIdParam2 sets up expected param id for FileProcessingService.Get
func (mmGet *mFileProcessingServiceMockGet) ExpectIdParam2(id int64) *mFileProcessingServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("FileProcessingServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &FileProcessingServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("FileProcessingServiceMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &FileProcessingServiceMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.id = &id
	mmGet.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the FileProcessingService.Get
func (mmGet *mFileProcessingServiceMockGet) Inspect(f func(ctx context.Context, id int64)) *mFileProcessingServiceMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for FileProcessingServiceMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by FileProcessingService.Get
func (mmGet *mFileProcessingServiceMockGet) Return(up1 *model.UploadedFile, err error) *FileProcessingServiceMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("FileProcessingServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &FileProcessingServiceMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &FileProcessingServiceMockGetResults{up1, err}
	mmGet.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGet.mock
}

// Set uses given function f to mock the FileProcessingService.Get method
func (mmGet *mFileProcessingServiceMockGet) Set(f func(ctx context.Context, id int64) (up1 *model.UploadedFile, err error)) *FileProcessingServiceMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the FileProcessingService.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the FileProcessingService.Get method")
	}

	mmGet.mock.funcGet = f
	mmGet.mock.funcGetOrigin = minimock.CallerInfo(1)
	return mmGet.mock
}

// When sets expectation for the FileProcessingService.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mFileProcessingServiceMockGet) When(ctx context.Context, id int64) *FileProcessingServiceMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("FileProcessingServiceMock.Get mock is already set by Set")
	}

	expectation := &FileProcessingServiceMockGetExpectation{
		mock:               mmGet.mock,
		params:             &FileProcessingServiceMockGetParams{ctx, id},
		expectationOrigins: FileProcessingServiceMockGetExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up FileProcessingService.Get return parameters for the expectation previously defined by the When method
func (e *FileProcessingServiceMockGetExpectation) Then(up1 *model.UploadedFile, err error) *FileProcessingServiceMock {
	e.results = &FileProcessingServiceMockGetResults{up1, err}
	return e.mock
}

// Times sets number of times FileProcessingService.Get should be invoked
func (mmGet *mFileProcessingServiceMockGet) Times(n uint64) *mFileProcessingServiceMockGet {
	if n == 0 {
		mmGet.mock.t.Fatalf("Times of FileProcessingServiceMock.Get mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGet.expectedInvocations, n)
	mmGet.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGet
}

func (mmGet *mFileProcessingServiceMockGet) invocationsDone() bool {
	if len(mmGet.expectations) == 0 && mmGet.defaultExpectation == nil && mmGet.mock.funcGet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGet.mock.afterGetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Get implements mm_service.FileProcessingService
func (mmGet *FileProcessingServiceMock) Get(ctx context.Context, id int64) (up1 *model.UploadedFile, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	mmGet.t.Helper()

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, id)
	}

	mm_params := FileProcessingServiceMockGetParams{ctx, id}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_want_ptrs := mmGet.GetMock.defaultExpectation.paramPtrs

		mm_got := FileProcessingServiceMockGetParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGet.t.Errorf("FileProcessingServiceMock.Get got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGet.GetMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmGet.t.Errorf("FileProcessingServiceMock.Get got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGet.GetMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("FileProcessingServiceMock.Get got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGet.GetMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the FileProcessingServiceMock.Get")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, id)
	}
	mmGet.t.Fatalf("Unexpected call to FileProcessingServiceMock.Get. %v %v", ctx, id)
	return
}

// GetAfterCounter returns a count of finished FileProcessingServiceMock.Get invocations
func (mmGet *FileProcessingServiceMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of FileProcessingServiceMock.Get invocations
func (mmGet *FileProcessingServiceMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to FileProcessingServiceMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mFileProcessingServiceMockGet) Calls() []*FileProcessingServiceMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*FileProcessingServiceMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *FileProcessingServiceMock) MinimockGetDone() bool {
	if m.GetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMock.invocationsDone()
}

// MinimockGetInspect logs each unmet expectation
func (m *FileProcessingServiceMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FileProcessingServiceMock.Get at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCounter := mm_atomic.LoadUint64(&m.afterGetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && afterGetCounter < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FileProcessingServiceMock.Get at\n%s", m.GetMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FileProcessingServiceMock.Get at\n%s with params: %#v", m.GetMock.defaultExpectation.expectationOrigins.origin, *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && afterGetCounter < 1 {
		m.t.Errorf("Expected call to FileProcessingServiceMock.Get at\n%s", m.funcGetOrigin)
	}

	if !m.GetMock.invocationsDone() && afterGetCounter > 0 {
		m.t.Errorf("Expected %d calls to FileProcessingServiceMock.Get at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetMock.expectedInvocations), m.GetMock.expectedInvocationsOrigin, afterGetCounter)
	}
}

type mFileProcessingServiceMockList struct {
	optional           bool
	mock               *FileProcessingServiceMock
	defaultExpectation *FileProcessingServiceMockListExpectation
	expectations       []*FileProcessingServiceMockListExpectation

	callArgs []*FileProcessingServiceMockListParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FileProcessingServiceMockListExpectation specifies expectation struct of the FileProcessingService.List
type FileProcessingServiceMockListExpectation struct {
	mock               *FileProcessingServiceMock
	params             *FileProcessingServiceMockListParams
	paramPtrs          *FileProcessingServiceMockListParamPtrs
	expectationOrigins FileProcessingServiceMockListExpectationOrigins
	results            *FileProcessingServiceMockListResults
	returnOrigin       string
	Counter            uint64
}

// FileProcessingServiceMockListParams contains parameters of the FileProcessingService.List
type FileProcessingServiceMockListParams struct {
	ctx    context.Context
	limit  uint64
	offset uint64
}

// FileProcessingServiceMockListParamPtrs contains pointers to parameters of the FileProcessingService.List
type FileProcessingServiceMockListParamPtrs struct {
	ctx    *context.Context
	limit  *uint64
	offset *uint64
}

// FileProcessingServiceMockListResults contains results of the FileProcessingService.List
type FileProcessingServiceMockListResults struct {
	upa1 []*model.UploadedFile
	err  error
}

// FileProcessingServiceMockListOrigins contains origins of expectations of the FileProcessingService.List
type FileProcessingServiceMockListExpectationOrigins struct {
	origin       string
	originCtx    string
	originLimit  string
	originOffset string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmList *mFileProcessingServiceMockList) Optional() *mFileProcessingServiceMockList {
	mmList.optional = true
	return mmList
}

// Expect sets up expected params for FileProcessingService.List
func (mmList *mFileProcessingServiceMockList) Expect(ctx context.Context, limit uint64, offset uint64) *mFileProcessingServiceMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("FileProcessingServiceMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &FileProcessingServiceMockListExpectation{}
	}

	if mmList.defaultExpectation.paramPtrs != nil {
		mmList.mock.t.Fatalf("FileProcessingServiceMock.List mock is already set by ExpectParams functions")
	}

	mmList.defaultExpectation.params = &FileProcessingServiceMockListParams{ctx, limit, offset}
	mmList.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmList.expectations {
		if minimock.Equal(e.params, mmList.defaultExpectation.params) {
			mmList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmList.defaultExpectation.params)
		}
	}

	return mmList
}

// ExpectCtxParam1 sets up expected param ctx for FileProcessingService.List
func (mmList *mFileProcessingServiceMockList) ExpectCtxParam1(ctx context.Context) *mFileProcessingServiceMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("FileProcessingServiceMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &FileProcessingServiceMockListExpectation{}
	}

	if mmList.defaultExpectation.params != nil {
		mmList.mock.t.Fatalf("FileProcessingServiceMock.List mock is already set by Expect")
	}

	if mmList.defaultExpectation.paramPtrs == nil {
		mmList.defaultExpectation.paramPtrs = &FileProcessingServiceMockListParamPtrs{}
	}
	mmList.defaultExpectation.paramPtrs.ctx = &ctx
	mmList.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmList
}

// ExpectLimitParam2 sets up expected param limit for FileProcessingService.List
func (mmList *mFileProcessingServiceMockList) ExpectLimitParam2(limit uint64) *mFileProcessingServiceMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("FileProcessingServiceMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &FileProcessingServiceMockListExpectation{}
	}

	if mmList.defaultExpectation.params != nil {
		mmList.mock.t.Fatalf("FileProcessingServiceMock.List mock is already set by Expect")
	}

	if mmList.defaultExpectation.paramPtrs == nil {
		mmList.defaultExpectation.paramPtrs = &FileProcessingServiceMockListParamPtrs{}
	}
	mmList.defaultExpectation.paramPtrs.limit = &limit
	mmList.defaultExpectation.expectationOrigins.originLimit = minimock.CallerInfo(1)

	return mmList
}

// ExpectOffsetParam3 sets up expected param offset for FileProcessingService.List
func (mmList *mFileProcessingServiceMockList) ExpectOffsetParam3(offset uint64) *mFileProcessingServiceMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("FileProcessingServiceMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &FileProcessingServiceMockListExpectation{}
	}

	if mmList.defaultExpectation.params != nil {
		mmList.mock.t.Fatalf("FileProcessingServiceMock.List mock is already set by Expect")
	}

	if mmList.defaultExpectation.paramPtrs == nil {
		mmList.defaultExpectation.paramPtrs = &FileProcessingServiceMockListParamPtrs{}
	}
	mmList.defaultExpectation.paramPtrs.offset = &offset
	mmList.defaultExpectation.expectationOrigins.originOffset = minimock.CallerInfo(1)

	return mmList
}

// Inspect accepts an inspector function that has same arguments as the FileProcessingService.List
func (mmList *mFileProcessingServiceMockList) Inspect(f func(ctx context.Context, limit uint64, offset uint64)) *mFileProcessingServiceMockList {
	if mmList.mock.inspectFuncList != nil {
		mmList.mock.t.Fatalf("Inspect function is already set for FileProcessingServiceMock.List")
	}

	mmList.mock.inspectFuncList = f

	return mmList
}

// Return sets up results that will be returned by FileProcessingService.List
func (mmList *mFileProcessingServiceMockList) Return(upa1 []*model.UploadedFile, err error) *FileProcessingServiceMock {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("FileProcessingServiceMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &FileProcessingServiceMockListExpectation{mock: mmList.mock}
	}
	mmList.defaultExpectation.results = &FileProcessingServiceMockListResults{upa1, err}
	mmList.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmList.mock
}

// Set uses given function f to mock the FileProcessingService.List method
func (mmList *mFileProcessingServiceMockList) Set(f func(ctx context.Context, limit uint64, offset uint64) (upa1 []*model.UploadedFile, err error)) *FileProcessingServiceMock {
	if mmList.defaultExpectation != nil {
		mmList.mock.t.Fatalf("Default expectation is already set for the FileProcessingService.List method")
	}

	if len(mmList.expectations) > 0 {
		mmList.mock.t.Fatalf("Some expectations are already set for the FileProcessingService.List method")
	}

	mmList.mock.funcList = f
	mmList.mock.funcListOrigin = minimock.CallerInfo(1)
	return mmList.mock
}

// When sets expectation for the FileProcessingService.List which will trigger the result defined by the following
// Then helper
func (mmList *mFileProcessingServiceMockList) When(ctx context.Context, limit uint64, offset uint64) *FileProcessingServiceMockListExpectation {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("FileProcessingServiceMock.List mock is already set by Set")
	}

	expectation := &FileProcessingServiceMockListExpectation{
		mock:               mmList.mock,
		params:             &FileProcessingServiceMockListParams{ctx, limit, offset},
		expectationOrigins: FileProcessingServiceMockListExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmList.expectations = append(mmList.expectations, expectation)
	return expectation
}

// Then sets up FileProcessingService.List return parameters for the expectation previously defined by the When method
func (e *FileProcessingServiceMockListExpectation) Then(upa1 []*model.UploadedFile, err error) *FileProcessingServiceMock {
	e.results = &FileProcessingServiceMockListResults{upa1, err}
	return e.mock
}

// Times sets number of times FileProcessingService.List should be invoked
func (mmList *mFileProcessingServiceMockList) Times(n uint64) *mFileProcessingServiceMockList {
	if n == 0 {
		mmList.mock.t.Fatalf("Times of FileProcessingServiceMock.List mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmList.expectedInvocations, n)
	mmList.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmList
}

func (mmList *mFileProcessingServiceMockList) invocationsDone() bool {
	if len(mmList.expectations) == 0 && mmList.defaultExpectation == nil && mmList.mock.funcList == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmList.mock.afterListCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmList.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// List implements mm_service.FileProcessingService
func (mmList *FileProcessingServiceMock) List(ctx context.Context, limit uint64, offset uint64) (upa1 []*model.UploadedFile, err error) {
	mm_atomic.AddUint64(&mmList.beforeListCounter, 1)
	defer mm_atomic.AddUint64(&mmList.afterListCounter, 1)

	mmList.t.Helper()

	if mmList.inspectFuncList != nil {
		mmList.inspectFuncList(ctx, limit, offset)
	}

	mm_params := FileProcessingServiceMockListParams{ctx, limit, offset}

	// Record call args
	mmList.ListMock.mutex.Lock()
	mmList.ListMock.callArgs = append(mmList.ListMock.callArgs, &mm_params)
	mmList.ListMock.mutex.Unlock()

	for _, e := range mmList.ListMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.upa1, e.results.err
		}
	}

	if mmList.ListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmList.ListMock.defaultExpectation.Counter, 1)
		mm_want := mmList.ListMock.defaultExpectation.params
		mm_want_ptrs := mmList.ListMock.defaultExpectation.paramPtrs

		mm_got := FileProcessingServiceMockListParams{ctx, limit, offset}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmList.t.Errorf("FileProcessingServiceMock.List got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmList.ListMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.limit != nil && !minimock.Equal(*mm_want_ptrs.limit, mm_got.limit) {
				mmList.t.Errorf("FileProcessingServiceMock.List got unexpected parameter limit, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmList.ListMock.defaultExpectation.expectationOrigins.originLimit, *mm_want_ptrs.limit, mm_got.limit, minimock.Diff(*mm_want_ptrs.limit, mm_got.limit))
			}

			if mm_want_ptrs.offset != nil && !minimock.Equal(*mm_want_ptrs.offset, mm_got.offset) {
				mmList.t.Errorf("FileProcessingServiceMock.List got unexpected parameter offset, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmList.ListMock.defaultExpectation.expectationOrigins.originOffset, *mm_want_ptrs.offset, mm_got.offset, minimock.Diff(*mm_want_ptrs.offset, mm_got.offset))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmList.t.Errorf("FileProcessingServiceMock.List got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmList.ListMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmList.ListMock.defaultExpectation.results
		if mm_results == nil {
			mmList.t.Fatal("No results are set for the FileProcessingServiceMock.List")
		}
		return (*mm_results).upa1, (*mm_results).err
	}
	if mmList.funcList != nil {
		return mmList.funcList(ctx, limit, offset)
	}
	mmList.t.Fatalf("Unexpected call to FileProcessingServiceMock.List. %v %v %v", ctx, limit, offset)
	return
}

// ListAfterCounter returns a count of finished FileProcessingServiceMock.List invocations
func (mmList *FileProcessingServiceMock) ListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmList.afterListCounter)
}

// ListBeforeCounter returns a count of FileProcessingServiceMock.List invocations
func (mmList *FileProcessingServiceMock) ListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmList.beforeListCounter)
}

// Calls returns a list of arguments used in each call to FileProcessingServiceMock.List.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmList *mFileProcessingServiceMockList) Calls() []*FileProcessingServiceMockListParams {
	mmList.mutex.RLock()

	argCopy := make([]*FileProcessingServiceMockListParams, len(mmList.callArgs))
	copy(argCopy, mmList.callArgs)

	mmList.mutex.RUnlock()

	return argCopy
}

// MinimockListDone returns true if the count of the List invocations corresponds
// the number of defined expectations
func (m *FileProcessingServiceMock) MinimockListDone() bool {
	if m.ListMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListMock.invocationsDone()
}

// MinimockListInspect logs each unmet expectation
func (m *FileProcessingServiceMock) MinimockListInspect() {
	for _, e := range m.ListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FileProcessingServiceMock.List at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterListCounter := mm_atomic.LoadUint64(&m.afterListCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListMock.defaultExpectation != nil && afterListCounter < 1 {
		if m.ListMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FileProcessingServiceMock.List at\n%s", m.ListMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FileProcessingServiceMock.List at\n%s with params: %#v", m.ListMock.defaultExpectation.expectationOrigins.origin, *m.ListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcList != nil && afterListCounter < 1 {
		m.t.Errorf("Expected call to FileProcessingServiceMock.List at\n%s", m.funcListOrigin)
	}

	if !m.ListMock.invocationsDone() && afterListCounter > 0 {
		m.t.Errorf("Expected %d calls to FileProcessingServiceMock.List at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ListMock.expectedInvocations), m.ListMock.expectedInvocationsOrigin, afterListCounter)
	}
}

type mFileProcessingServiceMockUpdate struct {
	optional           bool
	mock               *FileProcessingServiceMock
	defaultExpectation *FileProcessingServiceMockUpdateExpectation
	expectations       []*FileProcessingServiceMockUpdateExpectation

	callArgs []*FileProcessingServiceMockUpdateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FileProcessingServiceMockUpdateExpectation specifies expectation struct of the FileProcessingService.Update
type FileProcessingServiceMockUpdateExpectation struct {
	mock               *FileProcessingServiceMock
	params             *FileProcessingServiceMockUpdateParams
	paramPtrs          *FileProcessingServiceMockUpdateParamPtrs
	expectationOrigins FileProcessingServiceMockUpdateExpectationOrigins
	results            *FileProcessingServiceMockUpdateResults
	returnOrigin       string
	Counter            uint64
}

// FileProcessingServiceMockUpdateParams contains parameters of the FileProcessingService.Update
type FileProcessingServiceMockUpdateParams struct {
	ctx  context.Context
	file *model.UploadedFile
}

// FileProcessingServiceMockUpdateParamPtrs contains pointers to parameters of the FileProcessingService.Update
type FileProcessingServiceMockUpdateParamPtrs struct {
	ctx  *context.Context
	file **model.UploadedFile
}

// FileProcessingServiceMockUpdateResults contains results of the FileProcessingService.Update
type FileProcessingServiceMockUpdateResults struct {
	err error
}

// FileProcessingServiceMockUpdateOrigins contains origins of expectations of the FileProcessingService.Update
type FileProcessingServiceMockUpdateExpectationOrigins struct {
	origin     string
	originCtx  string
	originFile string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdate *mFileProcessingServiceMockUpdate) Optional() *mFileProcessingServiceMockUpdate {
	mmUpdate.optional = true
	return mmUpdate
}

// Expect sets up expected params for FileProcessingService.Update
func (mmUpdate *mFileProcessingServiceMockUpdate) Expect(ctx context.Context, file *model.UploadedFile) *mFileProcessingServiceMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("FileProcessingServiceMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &FileProcessingServiceMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.paramPtrs != nil {
		mmUpdate.mock.t.Fatalf("FileProcessingServiceMock.Update mock is already set by ExpectParams functions")
	}

	mmUpdate.defaultExpectation.params = &FileProcessingServiceMockUpdateParams{ctx, file}
	mmUpdate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// ExpectCtxParam1 sets up expected param ctx for FileProcessingService.Update
func (mmUpdate *mFileProcessingServiceMockUpdate) ExpectCtxParam1(ctx context.Context) *mFileProcessingServiceMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("FileProcessingServiceMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &FileProcessingServiceMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.params != nil {
		mmUpdate.mock.t.Fatalf("FileProcessingServiceMock.Update mock is already set by Expect")
	}

	if mmUpdate.defaultExpectation.paramPtrs == nil {
		mmUpdate.defaultExpectation.paramPtrs = &FileProcessingServiceMockUpdateParamPtrs{}
	}
	mmUpdate.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdate
}

// ExpectFileParam2 sets up expected param file for FileProcessingService.Update
func (mmUpdate *mFileProcessingServiceMockUpdate) ExpectFileParam2(file *model.UploadedFile) *mFileProcessingServiceMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("FileProcessingServiceMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &FileProcessingServiceMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.params != nil {
		mmUpdate.mock.t.Fatalf("FileProcessingServiceMock.Update mock is already set by Expect")
	}

	if mmUpdate.defaultExpectation.paramPtrs == nil {
		mmUpdate.defaultExpectation.paramPtrs = &FileProcessingServiceMockUpdateParamPtrs{}
	}
	mmUpdate.defaultExpectation.paramPtrs.file = &file
	mmUpdate.defaultExpectation.expectationOrigins.originFile = minimock.CallerInfo(1)

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the FileProcessingService.Update
func (mmUpdate *mFileProcessingServiceMockUpdate) Inspect(f func(ctx context.Context, file *model.UploadedFile)) *mFileProcessingServiceMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for FileProcessingServiceMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by FileProcessingService.Update
func (mmUpdate *mFileProcessingServiceMockUpdate) Return(err error) *FileProcessingServiceMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("FileProcessingServiceMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &FileProcessingServiceMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &FileProcessingServiceMockUpdateResults{err}
	mmUpdate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdate.mock
}

// Set uses given function f to mock the FileProcessingService.Update method
func (mmUpdate *mFileProcessingServiceMockUpdate) Set(f func(ctx context.Context, file *model.UploadedFile) (err error)) *FileProcessingServiceMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the FileProcessingService.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the FileProcessingService.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	mmUpdate.mock.funcUpdateOrigin = minimock.CallerInfo(1)
	return mmUpdate.mock
}

// When sets expectation for the FileProcessingService.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mFileProcessingServiceMockUpdate) When(ctx context.Context, file *model.UploadedFile) *FileProcessingServiceMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("FileProcessingServiceMock.Update mock is already set by Set")
	}

	expectation := &FileProcessingServiceMockUpdateExpectation{
		mock:               mmUpdate.mock,
		params:             &FileProcessingServiceMockUpdateParams{ctx, file},
		expectationOrigins: FileProcessingServiceMockUpdateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up FileProcessingService.Update return parameters for the expectation previously defined by the When method
func (e *FileProcessingServiceMockUpdateExpectation) Then(err error) *FileProcessingServiceMock {
	e.results = &FileProcessingServiceMockUpdateResults{err}
	return e.mock
}

// Times sets number of times FileProcessingService.Update should be invoked
func (mmUpdate *mFileProcessingServiceMockUpdate) Times(n uint64) *mFileProcessingServiceMockUpdate {
	if n == 0 {
		mmUpdate.mock.t.Fatalf("Times of FileProcessingServiceMock.Update mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdate.expectedInvocations, n)
	mmUpdate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdate
}

func (mmUpdate *mFileProcessingServiceMockUpdate) invocationsDone() bool {
	if len(mmUpdate.expectations) == 0 && mmUpdate.defaultExpectation == nil && mmUpdate.mock.funcUpdate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdate.mock.afterUpdateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Update implements mm_service.FileProcessingService
func (mmUpdate *FileProcessingServiceMock) Update(ctx context.Context, file *model.UploadedFile) (err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	mmUpdate.t.Helper()

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, file)
	}

	mm_params := FileProcessingServiceMockUpdateParams{ctx, file}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, &mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_want_ptrs := mmUpdate.UpdateMock.defaultExpectation.paramPtrs

		mm_got := FileProcessingServiceMockUpdateParams{ctx, file}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdate.t.Errorf("FileProcessingServiceMock.Update got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdate.UpdateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.file != nil && !minimock.Equal(*mm_want_ptrs.file, mm_got.file) {
				mmUpdate.t.Errorf("FileProcessingServiceMock.Update got unexpected parameter file, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdate.UpdateMock.defaultExpectation.expectationOrigins.originFile, *mm_want_ptrs.file, mm_got.file, minimock.Diff(*mm_want_ptrs.file, mm_got.file))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("FileProcessingServiceMock.Update got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdate.UpdateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the FileProcessingServiceMock.Update")
		}
		return (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, file)
	}
	mmUpdate.t.Fatalf("Unexpected call to FileProcessingServiceMock.Update. %v %v", ctx, file)
	return
}

// UpdateAfterCounter returns a count of finished FileProcessingServiceMock.Update invocations
func (mmUpdate *FileProcessingServiceMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of FileProcessingServiceMock.Update invocations
func (mmUpdate *FileProcessingServiceMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to FileProcessingServiceMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mFileProcessingServiceMockUpdate) Calls() []*FileProcessingServiceMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*FileProcessingServiceMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *FileProcessingServiceMock) MinimockUpdateDone() bool {
	if m.UpdateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateMock.invocationsDone()
}

// MinimockUpdateInspect logs each unmet expectation
func (m *FileProcessingServiceMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FileProcessingServiceMock.Update at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateCounter := mm_atomic.LoadUint64(&m.afterUpdateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && afterUpdateCounter < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FileProcessingServiceMock.Update at\n%s", m.UpdateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FileProcessingServiceMock.Update at\n%s with params: %#v", m.UpdateMock.defaultExpectation.expectationOrigins.origin, *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && afterUpdateCounter < 1 {
		m.t.Errorf("Expected call to FileProcessingServiceMock.Update at\n%s", m.funcUpdateOrigin)
	}

	if !m.UpdateMock.invocationsDone() && afterUpdateCounter > 0 {
		m.t.Errorf("Expected %d calls to FileProcessingServiceMock.Update at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateMock.expectedInvocations), m.UpdateMock.expectedInvocationsOrigin, afterUpdateCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *FileProcessingServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateInspect()

			m.MinimockDeleteInspect()

			m.MinimockGetInspect()

			m.MinimockListInspect()

			m.MinimockUpdateInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *FileProcessingServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *FileProcessingServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockDeleteDone() &&
		m.MinimockGetDone() &&
		m.MinimockListDone() &&
		m.MinimockUpdateDone()
}

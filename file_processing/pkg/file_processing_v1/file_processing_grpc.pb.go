// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: file_processing.proto

package file_processing_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileProcessingServiceClient is the client API for FileProcessingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileProcessingServiceClient interface {
	UploadCSVFile(ctx context.Context, in *UploadCSVFileRequest, opts ...grpc.CallOption) (*UploadCSVResponse, error)
	GetFileMetadata(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*FileMetadataResponse, error)
	UpdateCSVFile(ctx context.Context, in *UpdateCSVFileRequest, opts ...grpc.CallOption) (*UploadCSVResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
}

type fileProcessingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileProcessingServiceClient(cc grpc.ClientConnInterface) FileProcessingServiceClient {
	return &fileProcessingServiceClient{cc}
}

func (c *fileProcessingServiceClient) UploadCSVFile(ctx context.Context, in *UploadCSVFileRequest, opts ...grpc.CallOption) (*UploadCSVResponse, error) {
	out := new(UploadCSVResponse)
	err := c.cc.Invoke(ctx, "/fileprocessing_v1.FileProcessingService/UploadCSVFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingServiceClient) GetFileMetadata(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*FileMetadataResponse, error) {
	out := new(FileMetadataResponse)
	err := c.cc.Invoke(ctx, "/fileprocessing_v1.FileProcessingService/GetFileMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingServiceClient) UpdateCSVFile(ctx context.Context, in *UpdateCSVFileRequest, opts ...grpc.CallOption) (*UploadCSVResponse, error) {
	out := new(UploadCSVResponse)
	err := c.cc.Invoke(ctx, "/fileprocessing_v1.FileProcessingService/UpdateCSVFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, "/fileprocessing_v1.FileProcessingService/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingServiceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, "/fileprocessing_v1.FileProcessingService/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileProcessingServiceServer is the server API for FileProcessingService service.
// All implementations must embed UnimplementedFileProcessingServiceServer
// for forward compatibility
type FileProcessingServiceServer interface {
	UploadCSVFile(context.Context, *UploadCSVFileRequest) (*UploadCSVResponse, error)
	GetFileMetadata(context.Context, *GetFileRequest) (*FileMetadataResponse, error)
	UpdateCSVFile(context.Context, *UpdateCSVFileRequest) (*UploadCSVResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	mustEmbedUnimplementedFileProcessingServiceServer()
}

// UnimplementedFileProcessingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileProcessingServiceServer struct {
}

func (UnimplementedFileProcessingServiceServer) UploadCSVFile(context.Context, *UploadCSVFileRequest) (*UploadCSVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadCSVFile not implemented")
}
func (UnimplementedFileProcessingServiceServer) GetFileMetadata(context.Context, *GetFileRequest) (*FileMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileMetadata not implemented")
}
func (UnimplementedFileProcessingServiceServer) UpdateCSVFile(context.Context, *UpdateCSVFileRequest) (*UploadCSVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCSVFile not implemented")
}
func (UnimplementedFileProcessingServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileProcessingServiceServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedFileProcessingServiceServer) mustEmbedUnimplementedFileProcessingServiceServer() {}

// UnsafeFileProcessingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileProcessingServiceServer will
// result in compilation errors.
type UnsafeFileProcessingServiceServer interface {
	mustEmbedUnimplementedFileProcessingServiceServer()
}

func RegisterFileProcessingServiceServer(s grpc.ServiceRegistrar, srv FileProcessingServiceServer) {
	s.RegisterService(&FileProcessingService_ServiceDesc, srv)
}

func _FileProcessingService_UploadCSVFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCSVFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServiceServer).UploadCSVFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileprocessing_v1.FileProcessingService/UploadCSVFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServiceServer).UploadCSVFile(ctx, req.(*UploadCSVFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessingService_GetFileMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServiceServer).GetFileMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileprocessing_v1.FileProcessingService/GetFileMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServiceServer).GetFileMetadata(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessingService_UpdateCSVFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCSVFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServiceServer).UpdateCSVFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileprocessing_v1.FileProcessingService/UpdateCSVFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServiceServer).UpdateCSVFile(ctx, req.(*UpdateCSVFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessingService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileprocessing_v1.FileProcessingService/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessingService_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServiceServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileprocessing_v1.FileProcessingService/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServiceServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileProcessingService_ServiceDesc is the grpc.ServiceDesc for FileProcessingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileProcessingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileprocessing_v1.FileProcessingService",
	HandlerType: (*FileProcessingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadCSVFile",
			Handler:    _FileProcessingService_UploadCSVFile_Handler,
		},
		{
			MethodName: "GetFileMetadata",
			Handler:    _FileProcessingService_GetFileMetadata_Handler,
		},
		{
			MethodName: "UpdateCSVFile",
			Handler:    _FileProcessingService_UpdateCSVFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FileProcessingService_DeleteFile_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _FileProcessingService_ListFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file_processing.proto",
}
